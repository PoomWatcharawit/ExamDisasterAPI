// <auto-generated />
using System;
using DisasterAPI.Connect;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DisasterAPI.Migrations
{
    [DbContext(typeof(DisasterDbContext))]
    [Migration("20250705094338_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DisasterAPI.Models.Alert", b =>
                {
                    b.Property<string>("AlertID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlertMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisasterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("AlertID");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("DisasterAPI.Models.AlertSetting", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisasterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThresholdScore")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("AlertSettings");
                });

            modelBuilder.Entity("DisasterAPI.Models.Regions", b =>
                {
                    b.Property<string>("RegionID")
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("DisasterTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DisasterAPI.Models.Regions", b =>
                {
                    b.OwnsOne("DisasterAPI.Models.LocationCoordinates", "LocationCoordinates", b1 =>
                        {
                            b1.Property<string>("RegionsRegionID")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("RegionsRegionID");

                            b1.ToTable("Regions");

                            b1.WithOwner()
                                .HasForeignKey("RegionsRegionID");
                        });

                    b.Navigation("LocationCoordinates")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
